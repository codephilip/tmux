# Unbind the default prefix key (Control-b) to use a custom prefix later
unbind C-b

# Set Control-a as the new prefix key (the key used to send commands to tmux)
set -g prefix ^a
set -g prefix C-a

# Enable mouse support for interacting with panes, windows, and resizing with the mouse
set -g mouse on

# Set up keys for quickly resizing panes. The -r flag allows for repeat without prefix
bind -r - resize-pane -D 4  # Resize pane 4 cells down
bind -r = resize-pane -U 2  # Resize pane 2 cells up
bind -r 0 resize-pane -R 2  # Resize pane 2 cells to the right
bind -r 9 resize-pane -L 2  # Resize pane 2 cells to the left

# Remove default bindings for horizontal and vertical pane splitting
unbind %
unbind '"'
# Rebind pane splitting to use \ for horizontal and Enter for vertical, keeping the current path
bind \\ split-window -h -c "#{pane_current_path}"
bind Enter split-window -v -c "#{pane_current_path}"
# Bind 'c' to create a new window with the current path
bind c new-window -c "#{pane_current_path}"

# Bind 'x' to kill the current pane
bind x kill-pane

# Unbind 'z' (which typically toggles pane zoom) and bind 'm' to maximize the current pane instead
unbind z
bind -r m resize-pane -Z

# Unbind 'k' (no comment provided on its original binding) and bind 'r' to reload the tmux configuration file
unbind k
bind r source-file ~/.config/tmux/tmux.conf \; display "Config reloaded ðŸš€"

# Set Vim-style keys for copy mode
set-window-option -g mode-keys vi

# Bind 'V' to enter copy mode and also to cancel copy mode when already in it
bind V copy-mode
bind -T copy-mode-vi V send-keys -X cancel

# Unbind the default 'v' for starting selection in copy mode
unbind -T copy-mode-vi v
# Bind 'v' to start selection in copy mode
bind -T copy-mode-vi v send-keys -X begin-selection

# Bind 'C-v' to toggle rectangle selection in copy mode
bind -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle

# Bind 'y' to copy the selection and cancel copy mode, using pbcopy for the clipboard
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"

# Bind MouseDragEnd1Pane to copy the selection and cancel copy mode, using pbcopy for the clipboard
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Configure the status bar to be displayed at the top of the screen
set-option -g status-position top

# Configure tmux to start window and pane indices from 1 instead of the default 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
# Enable automatic renumbering of windows when a window is closed
set-option -g renumber-windows on
# Enable tmux to set the system clipboard with copy operations
set -g set-clipboard on

# This variable determines if the current tmux pane is running a Vim process. It uses `ps` to list processes
# associated with the pane's tty and `grep` to search for Vim-related process names while ignoring case (-i) and
# using a regular expression (-qE). The regular expression checks for common names of Vim processes.
# The '^' indicates the start of the process name and '[^TXZ ]+' ensures the process is not stopped or a zombie.
# The '+$' ensures that any form of Vim (like nvim, vimx) possibly followed by 'diff' is matched.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# These bindings allow navigation between tmux panes with the same keybindings as Vim, but only if Vim is not running.
# If Vim is running, the key press is sent to Vim instead of being handled by tmux.
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L' # Navigate to the left pane
bind -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D' # Navigate to the pane below
bind -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U' # Navigate to the pane above
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R' # Navigate to the right pane

# This command extracts the version number from the tmux version string.
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

# These conditional bindings check the tmux version and set the keybinding for 'C-\' accordingly.
# It allows toggling between the last active pane and the current pane. The check is necessary due to changes in
# how tmux handles keybindings in different versions.
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'" # For tmux versions below 3.0
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'" # For tmux versions 3.0 and above

# Bind 'C-Space' to either send the 'C-Space' key sequence to Vim or to switch to the last active pane in tmux.
bind -n 'C-Space' if-shell "$is_vim" 'send-keys C-Space' 'select-pane -t:.+'

# These bindings allow for Vim-like navigation within tmux's copy mode. They are set in the 'copy-mode-vi' table,
# which is the key table used when in copy mode with Vim keybindings enabled.
bind -T copy-mode-vi 'C-h' select-pane -L # Navigate to the left pane
bind -T copy-mode-vi 'C-j' select-pane -D # Navigate to the pane below
bind -T copy-mode-vi 'C-k' select-pane -U # Navigate to the pane above
bind -T copy-mode-vi 'C-l' select-pane -R # Navigate to the right pane
bind -T copy-mode-vi 'C-\' select-pane -l # Toggle to the last active pane
bind -T copy-mode-vi 'C-Space' select-pane -t:.+ # Switch to the next pane

# Configuration for the Catppuccin theme and tmux plugin manager (TPM).
set -g @plugin 'catppuccin/tmux'
set -g @plugin 'tmux-plugins/tpm'

# Custom Catppuccin theme settings for styling the status line and window display.
set -g @catppuccin_window_right_separator "â–ˆ " # Right separator symbol for windows
set -g @catppuccin_window_number_position "right" # Position of window number
set -g @catppuccin_window_middle_separator " | " # Middle separator between windows

set -g @catppuccin_window_default_fill "none" # Default background fill for inactive windows

# This sets the background fill for the currently active window in tmux's status bar. The "all" value means that the
# active window will have a full background color fill, making it clearly distinguishable from inactive windows.
set -g @catppuccin_window_current_fill "all"

# These settings configure what modules will appear on the right side of the tmux status bar. They include the name of the
# application, the current tmux session name, the username of the logged-in user, the hostname of the machine, and the current
# date and time.
set -g @catppuccin_status_modules_right "application session user host date_time"

# The left and right separators are set for the status bar. These characters (solid block "â–ˆ") will appear as separators on
# either end of the status bar, creating a visual boundary for the status text.
set -g @catppuccin_status_left_separator "â–ˆ"
set -g @catppuccin_status_right_separator "â–ˆ"

# This sets the format for the date and time module in the status bar. It follows the strftime format, displaying the year,
# month, day, hour, minute, and second in a YYYY-MM-DD HH:MM:SS format.
set -g @catppuccin_date_time_text "%Y-%m-%d %H:%M:%S"

# This command runs the tmux plugin manager (TPM), which is responsible for managing tmux plugins. It's typically placed at the
# end of the tmux configuration file to initialize TPM and load all configured plugins.
run '~/.config/tmux/plugins/tpm/tpm'

